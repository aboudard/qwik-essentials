"use strict";(self.webpackChunkqwik_essentials=self.webpackChunkqwik_essentials||[]).push([[712],{8461:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var o=t(4848),s=t(8453);const i={sidebar_position:4},r="Control structures",a={id:"qwik-basics/structure",title:"Control structures",description:"Display multiple data",source:"@site/docs/qwik-basics/structure.mdx",sourceDirName:"qwik-basics",slug:"/qwik-basics/structure",permalink:"/qwik-essentials/fr/docs/qwik-basics/structure",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/qwik-basics/structure.mdx",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Content of the component",permalink:"/qwik-essentials/fr/docs/qwik-basics/content"},next:{title:"The layout of the application",permalink:"/qwik-essentials/fr/docs/qwik-basics/layout"}},c={},d=[{value:"Display multiple data",id:"display-multiple-data",level:2},{value:"Inject data in a child component",id:"inject-data-in-a-child-component",level:3},{value:"Conditional rendering",id:"conditional-rendering",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"control-structures",children:"Control structures"}),"\n",(0,o.jsx)(n.h2,{id:"display-multiple-data",children:"Display multiple data"}),"\n",(0,o.jsxs)(n.p,{children:["Following a ",(0,o.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/handbook/jsx.html",children:"JSX syntax"}),", let's display a list of TODO items in a template.\nFirst, we can use a static list of items.\nThis list will be handled by a specific Signal method : ",(0,o.jsx)(n.a,{href:"https://qwik.dev/docs/components/state/#usestore",children:"useStore"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/todos/todos.tsx\nexport const Todos = component$(() => {\n    const todos = useStore([\n        { title: 'Learn Qwik', isDone: true },\n        { title: 'Build a Qwik app', isDone: false },\n        { title: 'Deploy the app', isDone: false },\n    ]);\n    return (\n        <div>\n            <h1>TODO List</h1>\n            <ul>\n                {todos.map((todo, index) => (\n                    <li key={index}>\n                        <strong>{todo.title}</strong> : {JSON.stringify(todo.isDone)}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"inject-data-in-a-child-component",children:"Inject data in a child component"}),"\n",(0,o.jsxs)(n.p,{children:["Now, let's create a child component to display a single TODO item.\nWe will inject the data from the parent component to the child component.\nThis is done with the ",(0,o.jsx)(n.code,{children:"props"})," attribute that should be typed within the child component."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/todo-item/todo-item.tsx\ninterface TodoItemProps {\n    title: string;\n    isDone: boolean;\n}\n\nexport const TodoItem = component$<{ todo: TodoItemProps }>((props) => {\n    return (\n        <li>\n            <strong>{props.todo.title}</strong> : {JSON.stringify(props.todo.isDone)}\n        </li>\n    );\n});\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Then, we can use the ",(0,o.jsx)(n.code,{children:"Todo"})," component in the ",(0,o.jsx)(n.code,{children:"Todos"})," component."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/todos/todos.tsx\nexport const Todos = component$(() => {\n    const todos = useStore([\n        { title: 'Learn Qwik', isDone: true },\n        { title: 'Build a Qwik app', isDone: false },\n        { title: 'Deploy the app', isDone: false },\n    ]);\n    return (\n        <div>\n            <h1>TODO List</h1>\n            <ul>\n                {todos.map((todo, index) => (\n                    <TodoItem key={index} todo={todo} />\n                ))}\n            </ul>\n        </div>\n    );\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"conditional-rendering",children:"Conditional rendering"}),"\n",(0,o.jsx)(n.p,{children:"We have a boolean variable in the component, now we can use it to conditionally render some elements."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:"// src/components/todo-item/todo-item.tsx\nexport const TodoItem = component$<{todo: TodoItemProps}>((props) => {\n    return (\n            <span>\n                <strong>{props.todo.title}</strong> : {props.todo.isDone ? 'Done' : 'Not Done'}\n            </span>\n    );\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var o=t(6540);const s={},i=o.createContext(s);function r(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);